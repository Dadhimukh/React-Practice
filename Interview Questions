what is react ?
                React is an open-source javascript liberary, which is used to create UI (UserInterfaces) for web applications..


What is babel ?
                Bable is a javascript compiler that can translate markup or programming language into javascript.
                
==========> React uses Babel to convert JSX into JavaScript.


What is JSX?
              JSX (JavaScript XML) is a JavaScript syntactic extension that is used in React to describe the structure and look of components. 
              It enables developers to construct and maintain user interfaces by allowing them to write HTML-like code within JavaScript.
              
              
What is the use of React DOM Render method
                         The method ReactDom.render() is used to render (display) HTML elements
                 
                 
                 
                 
                 
JSX Expressions
                Expressions can be used in JSX by wrapping them in curly {} braces
                
                
                
                
                
                
React Elements
                React applications are usually built around a single HTML element.
                React developers often call this the root node
                
                Elements are rendered (displayed) with the ReactDOM.render() method
                
                React elements are immutable. They cannot be changed.
  
                The only way to change a React element is to render a new element every time
                
                
                
                
                
                
Differentiate between Real DOM and Virtual DOM.
                                                Real DOM: The Real DOM represents the actual HTML structure of a web page. 
                                                It is a tree-like structure that consists of nodes representing HTML elements, attributes, and text content.
                                                Virtual DOM: The Virtual DOM is a lightweight copy or abstraction of the Real DOM. It is a JavaScript representation of the UI, 
                                                maintained in memory. It is not directly rendered on the screen but acts as a blueprint of the Real DOM.
                                                
                                                
                                                
                                                
                                                
                                                
Component-based architecture:
                              React allows developers to split her UI into reusable components. 
                              Each component maintains its own state and can be assembled to create complex user interfaces. 
                              This modular approach promotes reusability, maintainability, and isolation of code concerns. 
                                                
                                                
                                                
                                                
                                                
                                                
Virtual DOM:  
              Virtual DOM, which is a lightweight duplicate of the actual HTML DOM.
              The Virtual DOM enables React to effectively update and render UI components while making little changes to the real DOM. 
              This optimisation improves speed and creates a more pleasant user experience.
              
             
              
              
              
              
              
JSX syntax: 
            React utilizes JSX (JavaScript XML), an extension to JavaScript, to define the structure and appearance of components. 
            JSX allows developers to write HTML-like code within JavaScript, which is then transpiled into regular JavaScript during the build process. 
            This combination of JavaScript and HTML makes component creation and composition more intuitive and readable.
            
            
            
            
            
            
           
Unidirectional data flow: 
                          React uses unidirectional data flow, commonly known as one-way binding.
                          Props (properties) provide data from the parent component to the child component, 
                          and callbacks allow the child component to communicate with the parent component. 
                          This approach streamlines data management and reduces the potential for unintended side effects.  










React Hooks:  
              React Hooks allow you to access state and other React capabilities in functional components.
              This allows developers to handle stateful logic without creating class components, 
              making it easier to reuse code and share stateful logic between components. 
              
              
              
              
              
              
              
              
Rich ecosystem and community: 
                              React offers a large ecosystem of libraries, tools, and community support. 
                              This contains well-known frameworks such as React Router for routing, Redux for state management, 
                              and Axios for processing HTTP requests. The vibrant React community adds a variety of learning tools, 
                              tutorials, and reusable components.

                                                
                                                




What are the features of React? 
                                  Major features of React are listed below:

                                  It uses the virtual DOM instead of the real DOM.
                                  It uses server-side rendering.
                                  It follows uni-directional data flow or data binding.



List some of the major advantages of React.
What are the limitations of React?








Why can't browsers read JSX?
                            Web browsers are designed to understand HTML, CSS, and JavaScript, but not JSX. 
                            JSX is a syntactic extension that is only used by React and is not widely accepted in web development. 
                            As a result, browsers cannot parse and execute JSX code natively. Prior to browser execution, 
                            JSX must be transpilated into ordinary JavaScript code.                              
                              
                              
                              
How different is React's ES6 syntax when compared to ES5?
               
               
               
               
               
               
               
               
   
What is useState() in React?
                            The useState() is a built-in React Hook that allows you for having state variables in functional components. 
                            It should be used when the DOM has something that is dynamically manipulating/controlling.
                            
                            EXAMPLE
                                        const [count, setCounter] = useState(0);
                                        const [otherStuffs, setOtherStuffs] = useState(...);
                                        ...
                                        const setCount = () => {
                                           setCounter(count + 1);
                                           setOtherStuffs(...);
                                           ...
                                        };
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
What are the different phases of React component’s lifecycle?
                                                              There are three different phases of React component’s lifecycle:

                                                              Initial Rendering Phase: 
                                                                          This is the phase when the component is about to start its life journey and make its way to the DOM.
                                                              Updating Phase: 
                                                                          Once the component gets added to the DOM, it can potentially update and re-render only when a prop or state
                                                                          change occurs. That happens only in this phase.
                                                              Unmounting Phase: 
                                                                          This is the final phase of a component’s life cycle in which the component is destroyed and removed 
                                                                          from the DOM.


                
