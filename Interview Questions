what is react ?
                React is an open-source javascript liberary, which is used to create UI (UserInterfaces) for web applications..








What is babel ?
                Bable is a javascript compiler that can translate markup or programming language into javascript.





==========> React uses Babel to convert JSX into JavaScript.






What is JSX?
              JSX (JavaScript XML) is a JavaScript syntactic extension that is used in React to describe the structure and look of components. 
              It enables developers to construct and maintain user interfaces by allowing them to write HTML-like code within JavaScript.
              



What is the use of React DOM Render method
                                             The method ReactDom.render() is used to render (display) HTML elements


                 
                 
                 
                 
JSX Expressions
                Expressions can be used in JSX by wrapping them in curly {} braces
                
                
                
                
                
                
                


React Elements
                React applications are usually built around a single HTML element.
                React developers often call this the root node
                Elements are rendered (displayed) with the ReactDOM.render() method
                React elements are immutable. They cannot be changed.
                The only way to change a React element is to render a new element every time
                
                
                
                
                
                
                
                
Differentiate between Real DOM and Virtual DOM.
                                                Real DOM: The Real DOM represents the actual HTML structure of a web page. 
                                                It is a tree-like structure that consists of nodes representing HTML elements, attributes, and text content.
                                                Virtual DOM: The Virtual DOM is a lightweight copy or abstraction of the Real DOM. It is a JavaScript representation of the UI, 
                                                maintained in memory. It is not directly rendered on the screen but acts as a blueprint of the Real DOM.
                                                
                                                
                                                
                                                
              
                                     
                                                
Component-based architecture:
                              React allows developers to split her UI into reusable components. 
                              Each component maintains its own state and can be assembled to create complex user interfaces. 
                              This modular approach promotes reusability, maintainability, and isolation of code concerns. 
                                                


                                                
                          


                     
                                                


Virtual DOM:  
              Virtual DOM, which is a lightweight duplicate of the actual HTML DOM.
              The Virtual DOM enables React to effectively update and render UI components while making little changes to the real DOM. 
              This optimisation improves speed and creates a more pleasant user experience.
              
             
              
              
              
              
              
JSX syntax: 
            React utilizes JSX (JavaScript XML), an extension to JavaScript, to define the structure and appearance of components. 
            JSX allows developers to write HTML-like code within JavaScript, which is then transpiled into regular JavaScript during the build process. 
            This combination of JavaScript and HTML makes component creation and composition more intuitive and readable.
            
            
            
            
            
            
            
           
Unidirectional data flow: 
                          React uses unidirectional data flow, commonly known as one-way binding.
                          Props (properties) provide data from the parent component to the child component, 
                          and callbacks allow the child component to communicate with the parent component. 
                          This approach streamlines data management and reduces the potential for unintended side effects.  











React Hooks:  
              React Hooks allow you to access state and other React capabilities in functional components.
              This allows developers to handle stateful logic without creating class components, 
              making it easier to reuse code and share stateful logic between components. 
              
              
              
              


              
              
              
Rich ecosystem and community: 
                              React offers a large ecosystem of libraries, tools, and community support. 
                              This contains well-known frameworks such as React Router for routing, Redux for state management, 
                              and Axios for processing HTTP requests. The vibrant React community adds a variety of learning tools, 
                              tutorials, and reusable components.

                                                
                                                




What are the features of React? 
                                  Major features of React are listed below:
                                  It uses the virtual DOM instead of the real DOM.
                                  It uses server-side rendering.
                                  It follows uni-directional data flow or data binding.







List some of the major advantages of React.
What are the limitations of React?








Why can't browsers read JSX?
                            Web browsers are designed to understand HTML, CSS, and JavaScript, but not JSX. 
                            JSX is a syntactic extension that is only used by React and is not widely accepted in web development. 
                            As a result, browsers cannot parse and execute JSX code natively. Prior to browser execution, 
                            JSX must be transpilated into ordinary JavaScript code.                              
                              
                              
                              
                              
                              
                              
How different is React's ES6 syntax when compared to ES5?
               
               
               
               
               
               
               
               
   
What is useState() in React?
                            The useState() is a built-in React Hook that allows you for having state variables in functional components. 
                            It should be used when the DOM has something that is dynamically manipulating/controlling.
                            
                            EXAMPLE
                                        const [count, setCounter] = useState(0);
                                        const [otherStuffs, setOtherStuffs] = useState(...);
                                        ...
                                        const setCount = () => {
                                           setCounter(count + 1);
                                           setOtherStuffs(...);
                                           ...
                                        };
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
What are the different phases of React component’s lifecycle?
                                                              There are three different phases of React component’s lifecycle:

                                                              Initial Rendering Phase: 
                                                                          This is the phase when the component is about to start its life journey and make its way to the DOM.
                                                              Updating Phase: 
                                                                          Once the component gets added to the DOM, it can potentially update and re-render only when a prop or state
                                                                          change occurs. That happens only in this phase.
                                                              Unmounting Phase: 
                                                                          This is the final phase of a component’s life cycle in which the component is destroyed and removed 
                                                                          from the DOM.











Explain the lifecycle methods of React components in detail.
                                                              componentWillMount() – Executed just before rendering takes place both on the client as well as server-side.
                                                              componentDidMount() – Executed on the client side only after the first render.
                                                              componentWillReceiveProps() – Invoked as soon as the props are received from the parent class and before another 
                                                              render is called.
                                                              shouldComponentUpdate() – Returns true or false value based on certain conditions. \
                                                              If you want your component to update, return true else return false. By default, it returns false.
                                                              componentWillUpdate() – Called just before rendering takes place in the DOM.
                                                              componentDidUpdate() – Called immediately after rendering takes place.
                                                              componentWillUnmount() – Called after the component is unmounted from the DOM. It is used to clear up the memory spaces.
                                                              
                                                              
                                                              
                                                              
                                                              
                                                              
                                                              
                                                              
                                                              
                                                              
                                                              
WHat is Contaxt API in react ?
                                The Contaxt API is provided by React to solve the issue of sharing state between multiple components within an app.
                                Before context was introduced, the only option was a bring in a seprate state management library, such as Redux.
                                However, many developer feel that Redux intriduces a lot of unnecessary complexity, especially for smaller applications.
                                useContext helps to avoid props drilling.
                                
                                
                                
                                
                                
                                
                                
                                
How to handle error boundaries in react ?
                                          To handle errors, wrap components with the error boundary class component. You can wrap the top-level component or individual components. 
                                          If you wrap the top-level component, the error boundary class will handle the errors thrown by all the components in the React application.














What Is the Error Boundary Class in React?
                                          Error boundaries work like the try/catch block in vanilla JavaScript. 
                                          The difference is that they catch the errors that occur in React components.
                                          If an error occurs in a UI component, React unmounts the tree within that component and replaces it with the fallback UI you have defined. 
                                          This means that an error only affects the component in which it occurs and the rest of the application works as expected.
                                          
                                          
                                          
                                          
                                          
                                          
                                          
                                          
                                          
                                          
                                          
                                          
What is an event in react ?
                            An event is an action that could be triggered as a result of the user action or system generated event. 
                            For example, a mouse click, loading of a web page, pressing a key, window resizes, and other interactions are called events.
                            
                            
                            
                            
                            
                            
                            
                            
                           
What are synthetic events in React?
                                    The synthetic events in react are the object in react, which acts as a cross-browser wrapper around the browser's
                                    nativ event. The main purpose is to combine the different browsers on the api so that the event shows the various properties.
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
What is the react roouter ?
                            The Router in React JS is a pure Javascript pacakage that allow to create complicated clint-side apps.
                            React Router makes it simple to manage the URL and state of application.
                                    
                            
                            
                            
                            
What are Hooks? 
                Hooks are functions that let us “hook into” React state and lifecycle features from a functional component.
                React Hooks cannot be used in class components. They let us write components without class.
                            
                            
                            
                            
                            
                            
                            
                            
What are the rules that must be followed while using React Hooks?
                                                                  There are 2 rules which must be followed while you code with Hooks:
                                                                  React Hooks must be called only at the top level. It is not allowed to call them inside the nested functions, 
                                                                  loops, or conditions.
                                                                  It is allowed to call the Hooks only from the React Function Components.                            
                            
                            
                            
                            
                            
                            
                            
What is the use of useEffect React Hooks?
                                          The useEffect React Hook is used for performing the side effects in functional components. 
                                          With the help of useEffect, you will inform React that your component requires something to be done after rendering the 
                                          component or after a state change. The function you have passed(can be referred to as “effect”) will be remembered by React 
                                          and call afterwards the performance of DOM updates is over. Using this, we can perform various calculations such as data fetching, 
                                          setting up document title, manipulating DOM directly, etc, that don’t target the output value. The useEffect hook will run by default
                                          after the first render and also after each update of the component. React will guarantee that the DOM will be updated by the time when 
                                          the effect has run by it.

                                          The useEffect React Hook will accept 2 arguments: useEffect(callback,[dependencies]);

                                          Where the first argument callback represents the function having the logic of side-effect and it will be immediately executed after 
                                          changes were being pushed to DOM. The second argument dependencies represent an optional array of dependencies. The useEffect() will 
                                          execute the callback only if there is a change in dependencies in between renderings.                            
                                                        
                                                                  EXAMPLE======>    import { useEffect } from 'react';
                                                                                    function WelcomeGreetings({ name }) {
                                                                                     const msg = `Hi, ${name}!`;     // Calculates output
                                                                                     useEffect(() => {
                                                                                       document.title = `Welcome to you ${name}`;    // Side-effect!
                                                                                     }, [name]);
                                                                                     return <div>{msg}</div>;         // Calculates output
                                                                                    }                            
                            
                            
                            
                            
                            
                            
What is the difference between Element and Component?
                                                      An Element is a plain object describing what you want to appear on the screen in terms of the DOM nodes or other components. 
                                                      Elements can contain other Elements in their props. Creating a React element is cheap. Once an element is created, 
                                                      it cannot be mutated.
                                                      
                                                      The JavaScript representation(Without JSX) of React Element would be as follows:
                                                      
                                                      const element = React.createElement("div", { id: "login-btn" }, "Login");
                                                      and this element can be simiplified using JSX
                                                      
                                                        <div id="login-btn">Login</div>
                                                      The above React.createElement() function returns an object as below:
                                                      
                                                      {
                                                        type: 'div',
                                                        props: {
                                                          children: 'Login',
                                                          id: 'login-btn'
                                                        }
                                                      }
                                                      Finally, this element renders to the DOM using ReactDOM.render().
                                                      
                                                      Whereas a component can be declared in several different ways. It can be a class with a render() method or 
                                                      it can be defined as a 
                                                      function. In either case, it takes props as an input, and returns a JSX tree as the output:
                                                      
                                                      const Button = ({ handleLogin }) => (
                                                        <div id={"login-btn"} onClick={handleLogin}>
                                                          Login
                                                        </div>
                                                      );
                                                      Then JSX gets transpiled to a React.createElement() function tree:

                                                        const Button = ({ handleLogin }) =>
                                                          React.createElement(
                                                            "div",
                                                            { id: "login-btn", onClick: handleLogin },
                                                            "Login"
                                                          );

                            
                            









What are Pure Components?
                          Pure components are the components which render the same output for the same state and props. 
                          In function components, you can achieve these pure components through memoized React.memo() API wrapping around the component. 
                          This API prevents unnecessary re-renders by comparing the previous props and new props using shallow comparison. 
                          So it will be helpful for performance optimizations.
                          
                          But at the same time, it won't compare the previous state with the current state because function component itself prevents the unnecessary 
                          rendering by default when you set the same state again.
                          
                          The syntactic representation of memoized components looks like below,
                          
                          const MemoizedComponent = memo(SomeComponent, arePropsEqual?);
                          Below is the example of how child component(i.e., EmployeeProfile) prevents re-renders for the same props passed by parent component(i.e.,EmployeeRegForm).
                          
                            import { memo, useState } from 'react';
                          
                            const EmployeeProfile = memo(function EmployeeProfile({ name, email }) {
                              return (<>
                                    <p>Name:{name}</p>
                                    <p>Email: {email}</p>
                                    </>);
                            });
                            export default function EmployeeRegForm() {
                              const [name, setName] = useState('');
                              const [email, setEmail] = useState('');
                              return (
                                <>
                                  <label>
                                    Name: <input value={name} onChange={e => setName(e.target.value)} />
                                  </label>
                                  <label>
                                    Email: <input value={email} onChange={e => setEmail(e.target.value)} />
                                  </label>
                                  <hr/>
                                  <EmployeeProfile name={name}/>
                                </>
                              );
                            }
                          In the above code, the email prop has not been passed to child component. So there won't be any re-renders for email prop change.
                          
                          In class components, the components extending React.PureComponent instead of React.Component become the pure components. 
                          When props or state changes, PureComponent will do a shallow comparison on both props and state by invoking shouldComponentUpdate() lifecycle method.
                          
                          Note: React.memo() is a higher-order component.
                            
                            
                            
        
                    
                            
What are synthetic events in React?
                                      SyntheticEvent is a cross-browser wrapper around the browser's native event. 
                                      Its API is same as the browser's native event, including stopPropagation() and preventDefault(), 
                                      except the events work identically across all browsers. The native events can be accessed directly 
                                      from synthetic events using nativeEvent attribute.
                                      
                                      Let's take an example of BookStore title search component with the ability to get all native event properties
                                      
                                      function BookStore() {
                                        handleTitleChange(e) {
                                          console.log('The new title is:', e.target.value);
                                          // 'e' represents synthetic event
                                          const nativeEvent = e.nativeEvent;
                                          console.log(nativeEvent);
                                          e.stopPropogation();
                                          e.preventDefault();
                                        }
                                      
                                        return <input name="title" onChange={handleTitleChange} />
                                      }
                                                                      
                                
                
