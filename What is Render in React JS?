What Is Virtual DOM?
VDOM determines, as a Virtual "Document object Model library", that it Displays instances in the UI with the help of defined certain logic. 
We can also consider it as a library as ReactDOM. 

The virtual DOM comprises the specific node tree, which has its elements and attributes with its properties and objects. Using the render() function,
we can create a node using it is in-built react components and can do the modification of the node as per the action method in the data model. 
It is a light JavaScript object and can be consumed easily in different applications as per certain project requirements.

We can easily declare with the approach of React API functioning with DOM. It helps to maintain the event handling, and attribute manipulation 
in the code logic.



Here are the excellent advantages of Virtual DOM using React.JS

1. More Outstanding Performance
Virtual DOM provides amazing performance using the setState() procedure. We can easily create this method and can render 
it using the virtual DOM tree within the memory.

2. Integrity and Simplicity
It is more beneficial for the developers that they can efficiently use the React and Virtual DOM in a simpler way with the help
of JavaScript and it can easily integrate into the application with no interventions.

3. Efficiency
Virtual DOM has the ability to handle the data transformations in the React web application inside the view. Virtual DOM is consistently 
quicker than representing the UI in the original browser DOM.

4. CPU Intensive 
Virtual DOM defines the various options of scripting, hence it helps to optimize the best browser compatibility features hence It is more CPU-intensive 

5. Enhanced Memory Usage 
The Virtual DOM produces more enhanced memory usage mechanisms in the applications. It helps to automate the data model using the trigger mechanism and loads the real-time data in the virtual web user interface.  






Purpose of Render
We can use the ReactDOM.render() in the application using the declaration of HTML code and the HTML element. 
The goal of this function is to represent the imposed HTML code within the specified HTML element tags. 
It helps to redirect the HTML page with the help of the render() function.

It can be immutable in a certain scenario when you create an element and then you can define it as constant, 
hence it would not allow changing this.

It helps to develop an application in a more presentable way using the below features:

Open Source and Free
Flexibility
Decorators from ES7
Server-side Intelligence
Asynchronous Operations and Generators
Flux Library Technique
Restructuring Schemes
Effectiveness of JSX







Example of Using Render in React JS
Rendering an Element Using the DOM

Declare this below code in your HTML using Div

<div id="Yourroot">
</div>

To render or redirect the element use below code 
const root = ReactDOM.createRoot(document.getElementById('Yourroot'));

const element = <h1>This is the initial example of React.JS</h1>;

root.render(element);

After running the above code snippet it will display the below output:












Updating the Rendered Element Using the DOM

Declare this below code in your HTML using Div:

<div id="yourroot">
</div>

As we discussed, React elements are constant and unchangeable(immutable). 
Hence it can not be changed its attributes and children once it is defined. It can be displayed in the UI once your page loads.
Here is below JS code for updating the render element:
const root = ReactDOM.createRoot(document.getElementById('yourroot'));

  function Timertick() {

  const Testelement = (

    <div>

      <h1>This is the example of updating the render using DOM</h1>

      <h2>Here is the current time {new Date().toLocaleTimeString()}.</h2>

    </div>

  );

  root.render(Testelement);

}

setInterval(Timertick, 1000);

After running the above code it will display the below output:
