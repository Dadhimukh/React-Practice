The state is a built-in React object that contains data or information about the component. 
A component’s state can change over time; whenever it changes, the component re-renders. The change in state can 
happen as a response to user action or system-generated events and these changes determine the component's behavior and how it will render.  



class Greetings extends React.Component {

  state = {

    name: "World"

  };

  updateName() {

    this.setState({ name: "Simplilearn" });

  }

  render() {

      return(

          <div>

              {this.state.name}

          </div>

      )

  }

}




A state can be modified based on user action or network changes
Every time the state of an object changes, React re-renders the component to the browser
The state object is initialized in the constructor
The state object can store multiple properties
this.setState() is used to change the value of the state object
setState() function performs a shallow merge between the new and the previous state






The setState() method
A state can be updated in response to event handlers, server responses, 
or prop changes. This is done using the setState() method. The setState() 
method enqueues all of the updates made to the component state and instructs 
React to re-render the component and its children with the updated state.

Always use the setState() method to change the state object, since it will ensure 
that the component knows it’s been updated and calls the render() method.

Now that we are familiar with the concept of a state in React, let’s have a look at 
how it is implemented in a React web application.



class Bike extends React.Component {

  constructor(props) {

    super(props);

     this.state = {

      make: "Yamaha",

      model: "R15",

      color: "blue"

    };

  }

  changeBikeColor = () => {

    this.setState({color: "black"});

  }

  render() {

    return (

      <div>

        <h2>My {this.state.make}</h2>

        <p>

          It is a {this.state.color}

          {this.state.model}.

        </p>

        <button

          type="button"

          onClick={this.changeBikeColor}

        >Change color</button>

      </div>

    );

  }

}


